#!/usr/bin/python3
"""
This module provides a function matrix_divided
which divides all elements of a matrix.
"""


def matrix_divided(matrix, div):
    """
    Divide all elements of a matrix by a divisor.

    Args:
        matrix (list of lists of ints/floats): The matrix to divide.
        div (int/float): The divisor.

    Returns:
        list of lists of floats: New matrix with all elements divided.

    Raises:
        TypeError: If matrix is not a list of lists of integers/floats,
                    if each row of the matrix is not the same size,
                    or if div is not a number.
        ZeroDivisionError: If div is zero.
    """

    if not isinstance(matrix, list) or
    not all(isinstance(row, list) for row in matrix):
        raise TypeError("matrix must be a matrix (list of lists)
of integers/floats")

    if not all(isinstance(el, (int, float))
               for row in matrix for el in row):
        raise TypeError("matrix must be a matrix (list of lists) 
        of integers/floats")

    if not all(len(row) == len(matrix[0]) for row in matrix):
        raise TypeError("Each row of the matrix must have the same size")

    if not isinstance(div, (int, float)):
        raise TypeError("div must be a number")

    if div == 0:
        raise ZeroDivisionError("division by zero")

    return [[round(el / div, 2) for el in row] for row in matrix]
